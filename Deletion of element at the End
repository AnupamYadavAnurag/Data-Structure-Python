class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def delete_at_end(self):
        # If the list is empty, there's nothing to delete
        if self.head is None:
            print("The list is empty.")
            return
        
        # If there's only one element in the list, remove it
        if self.head.next is None:
            self.head = None
            return
        
        # Traverse to the second last node
        temp = self.head
        while temp.next and temp.next.next:
            temp = temp.next
        
        # Now temp is pointing to the second-to-last node
        temp.next = None  # Remove the last node
    
    def print_list(self):
        temp = self.head
        while temp:
            print(temp.data, end=" -> ")
            temp = temp.next
        print("None")

# Example usage (Assuming list already exists):
ll = LinkedList()

# Manually adding nodes to the linked list for demonstration
ll.head = Node(10)
second = Node(20)
third = Node(30)
ll.head.next = second
second.next = third

print("Before deletion:")
ll.print_list()

# Deleting the last element
ll.delete_at_end()

print("After deleting the last element:")
ll.print_list()
